@page "/login"
@using Web.Auth;
@inject ICustomerService CustomerService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label>Login</label>
            <input @bind="model.Mail" type="mail" class="form-control" placeholder="login" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Mail { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = await CustomerService.Login(model.Mail, model.Password);
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid Colyaska");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

        await customAuthStateProvider.UpdateAuthenticationStateAsync(new UserSession
            {
                ClieNtCode = userAccount.ClieNtCode.ToString(),
                Mail = userAccount.Mail,
                Nickname = userAccount.Nickname,
                Role = "Customer"
            });
        navManager.NavigateTo("/", true);
    }
}
